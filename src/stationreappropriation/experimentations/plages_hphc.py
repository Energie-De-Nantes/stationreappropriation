import marimo

__generated_with = "0.13.15"
app = marimo.App(width="medium")


@app.cell
def _():
    import marimo as mo
    import pandas as pd
    import numpy as np

    from pathlib import Path

    from electriflux.simple_reader import process_flux, iterative_process_flux
    return Path, mo, pd


@app.cell
def _(Path, mo):
    csv_folder_picker = mo.ui.file_browser(
        initial_path=Path('~/data/').expanduser(),
        selection_mode="directory", 
        label="S√©lectionnez le dossier contenant les CSV √† concat√©ner"
    )
    return (csv_folder_picker,)


@app.cell(hide_code=True)
def _(csv_folder_picker, mo):
    mo.md(
        f"""
    ## S√©lection du dossier CSV
    {csv_folder_picker}
    """
    )
    return


@app.cell(hide_code=True)
def _(csv_folder_picker, mo, pd):
    mo.stop(not csv_folder_picker.value, "‚ö†Ô∏è S√©lectionnez le dossier CSV")

    csv_path = csv_folder_picker.path(0)
    csv_files = list(csv_path.glob("*.csv"))

    mo.stop(not csv_files, f"‚ùå Aucun fichier CSV trouv√© dans {csv_path}")

    print(f"üìÅ Fichiers CSV trouv√©s : {len(csv_files)}")
    for csv_file in csv_files:
        print(f"  - {csv_file.name}")

    # Lecture et concat√©nation de tous les CSV
    dataframes = []
    for csv_file in csv_files:
        try:
            df = pd.read_csv(csv_file, sep=';')
            print(f"‚úÖ {csv_file.name}: {len(df)} lignes")
            dataframes.append(df)
        except Exception as e:
            print(f"‚ùå Erreur lecture {csv_file.name}: {e}")

    if dataframes:
        concatenated_df = pd.concat(dataframes, ignore_index=True)
        print(f"\nüìä Donn√©es concat√©n√©es: {len(concatenated_df)} lignes, {len(concatenated_df.columns)} colonnes")
    else:
        concatenated_df = pd.DataFrame()
        print("‚ùå Aucune donn√©e √† concat√©ner")

    return (concatenated_df,)


@app.cell(hide_code=True)
def _(concatenated_df, mo):
    mo.stop(concatenated_df.empty, "‚ùå Aucune donn√©e disponible")

    mo.md(f"""
    ## Aper√ßu des donn√©es concat√©n√©es
    **{len(concatenated_df)} lignes** - **{len(concatenated_df.columns)} colonnes**
    """)
    return


@app.cell
def _(concatenated_df):
    concatenated_df.sort_values(by=['OFFRE_FRN_HC', 'DATE_BASCULE'])
    return


@app.cell
def _():
    return


if __name__ == "__main__":
    app.run()
